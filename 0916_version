import javax.swing.border.*;

import net.sf.json.JSONObject;

import java.awt.*;
import java.awt.event.*;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.*;
/*
 * Created by JFormDesigner on Sun Oct 08 15:50:16 CST 2023
 */


/**
 * @author lWX1091923
 */
public class MyJframe extends JFrame {
    public MyJframe() {
        initComponents();
    }

    private void labelUrlOpenMouseMoved(MouseEvent e) {
        // TODO add your code here
        //鼠标移动到浏览器图标  显示悬浮字体


    }

    private void labelUrlOpenMouseClicked(MouseEvent e) {
        // TODO add your code here
        //浏览器图标点击进入CMC版本归档地址
        String versionNum = textFieldVersionNum.getText();
        String noSpaceVersionNum = versionNum.replace(" ", "%20");

        String urlprame = "http://gdt.cbg.huawei.com/cmo/cmcInfo/getCmcPathInfo?version=" + noSpaceVersionNum;

        String post = HttpURLConnectionHelper.sendRequest(urlprame, "GET");
        String result = null;

        try {
            JSONObject jsonObject = JSONObject.fromObject(post);
            Object result1 = jsonObject.get("result");
            Object packageType = JSONObject.fromObject(result1).get("packageType");

            String versionNumId = "";
            if ("BaseSoftware".equals(packageType)) {
                Object baseId = JSONObject.fromObject(result1).get("baseId");
                versionNumId = (String) baseId;
            }

            if ("CustSoftware".equals(packageType)) {
                Object custId = JSONObject.fromObject(result1).get("custId");
                versionNumId = (String) custId;
            }

            if ("CombinationSoftware".equals(packageType)) {
                Object combinationId = JSONObject.fromObject(result1).get("CombinationId");
                versionNumId = (String) combinationId;
            }


            String cmcUri = "https://cbg.huawei.com/#/group/ipd/VersionDetailInfo?id=" + versionNumId;


            Desktop desktop = Desktop.getDesktop();
            try {
                URI uri = new URI(cmcUri);
                desktop.browse(uri);
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }


        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void labelPackageNameMouseClicked(MouseEvent e) {
        // TODO add your code here
        //包名获取


    }

    private void buttonGetMouseClicked(MouseEvent e) {
        // TODO add your code here
        //下载版本  获取信息


//------------------------------------------下载版本------------------------------------------


        //------------------------------------------判断版本类型，根据包类型下载不同文件------------------------------------------

        String versionNumber = textFieldVersionNum.getText();
        String NoSpaceversionNumber = versionNumber.replace(" ", "%20");

        String urlprame = "http://gdt.cbg.huawei.com/cmo/cmcInfo/getCmcPathInfo?version=" + NoSpaceversionNumber;
        String post = HttpURLConnectionHelper.sendRequest(urlprame, "GET");
        String result = null;

        try {
            JSONObject jsonObject = JSONObject.fromObject(post);
            Object result1 = jsonObject.get("result");

            Object packageType = JSONObject.fromObject(result1).get("packageType");
            System.out.println(packageType);

            //基础包
            if("BaseSoftware".equals((String)packageType)){
                CmcDownloadTool.CmcDownload(versionNumber,"BiddingDoc/Code_Opensource.tar.gz");
                CmcDownloadTool.CmcDownload(versionNumber,"BiddingDoc/BiddingDoc/config/chipset_HuaweiPatchToolOut.tar.gz");
                CmcDownloadTool.CmcDownload(versionNumber,"BiddingDoc/BiddingDoc/config/system_HuaweiPatchToolOut.tar.gz");
                CmcDownloadTool.CmcDownload(versionNumber,"BiddingDoc/BiddingDoc/config/chipset_HuaweiPatchToolOut.tar.gz");

            }

            //定制包
            if("CustSoftware".equals((String)packageType)){

            }

            //货架包
            if("PreloadSoftware".equals((String)packageType)){

            }

            //组合包
            if("CombinationSoftware".equals((String)packageType)){

            }

        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }








        //------------------------------------------判断版本类型------------------------------------------


    }

    private void labelPackageNameMouseEntered(MouseEvent e) {
        // TODO add your code here
        labelPackageName.setForeground(new Color(150, 205, 205));
    }

    private void labelPackageNameMouseExited(MouseEvent e) {
        // TODO add your code here
        labelPackageName.setForeground(new Color(0, 0, 0));
    }

    private void initComponents() {
        // JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents  @formatter:off
        panel1 = new JPanel();
        textFieldVersionNum = new JTextField();
        label1 = new JLabel();
        buttonGet = new JButton();
        labelUrlOpen = new JLabel();
        labelPackageName = new JLabel();
        comboBoxCmcLocal = new JComboBox<>();

        //======== this ========
        setBackground(new Color(0x00a64b));
        setTitle("CMC\u7248\u672c\u4fe1\u606f\u83b7\u53d6");
        setVisible(true);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        Container contentPane = getContentPane();
        contentPane.setLayout(null);

        //======== panel1 ========
        {
            panel1.setBackground(new Color(0xf0f0f0));
            panel1.setForeground(Color.black);
            panel1.setName("aaaaa");
            panel1.setLayout(null);

            //---- textFieldVersionNum ----
            textFieldVersionNum.setBackground(Color.white);
            textFieldVersionNum.setForeground(Color.red);
            panel1.add(textFieldVersionNum);
            textFieldVersionNum.setBounds(315, 10, 285, 35);

            //---- label1 ----
            label1.setText("\u7248\u672c\u53f7");
            label1.setBackground(Color.white);
            label1.setForeground(Color.black);
            label1.setFont(new Font("Microsoft YaHei UI", Font.BOLD, 12));
            panel1.add(label1);
            label1.setBounds(270, 10, 45, 30);

            //---- buttonGet ----
            buttonGet.setText("\u83b7\u53d6");
            buttonGet.setForeground(Color.black);
            buttonGet.setBackground(Color.lightGray);
            buttonGet.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    buttonGetMouseClicked(e);
                }
            });
            panel1.add(buttonGet);
            buttonGet.setBounds(675, 15, 65, buttonGet.getPreferredSize().height);

            //---- labelUrlOpen ----
            labelUrlOpen.setIcon(new ImageIcon(getClass().getResource("/browser.png")));
            labelUrlOpen.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            labelUrlOpen.addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseMoved(MouseEvent e) {
                    labelUrlOpenMouseMoved(e);
                }
            });
            labelUrlOpen.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    labelUrlOpenMouseClicked(e);
                }
            });
            panel1.add(labelUrlOpen);
            labelUrlOpen.setBounds(745, 18, 25, 25);

            //---- labelPackageName ----
            labelPackageName.setText("package_name");
            labelPackageName.setForeground(Color.black);
            labelPackageName.setBackground(Color.lightGray);
            labelPackageName.setBorder(LineBorder.createBlackLineBorder());
            labelPackageName.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    labelPackageNameMouseClicked(e);
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    labelPackageNameMouseEntered(e);
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    labelPackageNameMouseExited(e);
                }
            });
            panel1.add(labelPackageName);
            labelPackageName.setBounds(40, 95, 95, 35);

            //---- comboBoxCmcLocal ----
            comboBoxCmcLocal.setModel(new DefaultComboBoxModel<>(new String[]{
                    "----",
                    "BiddingDoc\\config\\",
                    "BiddingDoc\\config\\base_package_config\\package_define.xml"
            }));
            comboBoxCmcLocal.setSelectedIndex(-1);
            panel1.add(comboBoxCmcLocal);
            comboBoxCmcLocal.setBounds(new Rectangle(new Point(420, 145), comboBoxCmcLocal.getPreferredSize()));

            {
                // compute preferred size
                Dimension preferredSize = new Dimension();
                for (int i = 0; i < panel1.getComponentCount(); i++) {
                    Rectangle bounds = panel1.getComponent(i).getBounds();
                    preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                    preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
                }
                Insets insets = panel1.getInsets();
                preferredSize.width += insets.right;
                preferredSize.height += insets.bottom;
                panel1.setMinimumSize(preferredSize);
                panel1.setPreferredSize(preferredSize);
            }
        }
        contentPane.add(panel1);
        panel1.setBounds(-5, -5, 1080, 745);

        {
            // compute preferred size
            Dimension preferredSize = new Dimension();
            for (int i = 0; i < contentPane.getComponentCount(); i++) {
                Rectangle bounds = contentPane.getComponent(i).getBounds();
                preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
            }
            Insets insets = contentPane.getInsets();
            preferredSize.width += insets.right;
            preferredSize.height += insets.bottom;
            contentPane.setMinimumSize(preferredSize);
            contentPane.setPreferredSize(preferredSize);
        }
        pack();
        setLocationRelativeTo(getOwner());
        // JFormDesigner - End of component initialization  //GEN-END:initComponents  @formatter:on
    }

    // JFormDesigner - Variables declaration - DO NOT MODIFY  //GEN-BEGIN:variables  @formatter:off
    private JPanel panel1;
    private JTextField textFieldVersionNum;
    private JLabel label1;
    private JButton buttonGet;
    private JLabel labelUrlOpen;
    private JLabel labelPackageName;
    private JComboBox<String> comboBoxCmcLocal;
    // JFormDesigner - End of variables declaration  //GEN-END:variables  @formatter:on
}























import net.sf.json.JSONObject;

import javax.swing.*;
import java.io.File;
import java.io.IOException;


//------------------------------------------下载版本------------------------------------------
public class CmcDownloadTool {
    public static String saveLocal = "D:/cmc_upload_download/";

    public static void CmcDownload(String versionNumber, String cmcLocal) {
        //versionNumber 版本号
        //cmcLocal   要下载的CMC文件路径  示例   1.目录  如：BiddingDoc\config\      2.文件  如：BiddingDoc\config\base_package_config\package_define.xml
        //saveLocal  下载后保存的位置  如：D:/cmc_upload_download/
        String NoSpaceversionNumber = versionNumber.replace(" ", "%20");


        String urlprame = "http://gdt.cbg.huawei.com/cmo/cmcInfo/getCmcPathInfo?version=" + NoSpaceversionNumber;
        String post = HttpURLConnectionHelper.sendRequest(urlprame, "GET");
        String result = null;

        try {
            JSONObject jsonObject = JSONObject.fromObject(post);
            Object result1 = jsonObject.get("result");
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }


        String command = "java -jar TRCartget.jar pull " + "\"" + versionNumber + "\"" + " -vp " + "\"" + cmcLocal + "\"" + " -ap " + "\"" + "D:/cmc_upload_download/" + "\"";     //下载命令


        System.out.println(command);
        try {
            Process process = Runtime.getRuntime().exec("cmd.exe /c " + command + " >>out.txt");

            try {
                int waitFor = process.waitFor();    //用于阻塞进程  下载完版本后才可进行后续操作
            } catch (InterruptedException e1) {
                // TODO 自动生成的 catch 块
                e1.printStackTrace();
            }
        } catch (IOException e1) {
            // TODO 自动生成的 catch 块
            e1.printStackTrace();
        }
    }


    public static void CmcDownload(String versionNumber, String cmcLocal, String saveLocal) {
        //versionNumber 版本号
        //cmcLocal   要下载的CMC文件路径  示例   1.目录  如：BiddingDoc\config\      2.文件  如：BiddingDoc\config\base_package_config\package_define.xml
        //saveLocal  下载后保存的位置  如：D:/cmc_upload_download/
        String NoSpaceversionNumber = versionNumber.replace(" ", "%20");


        String urlprame = "http://gdt.cbg.huawei.com/cmo/cmcInfo/getCmcPathInfo?version=" + NoSpaceversionNumber;
        String post = HttpURLConnectionHelper.sendRequest(urlprame, "GET");
        String result = null;

        try {
            JSONObject jsonObject = JSONObject.fromObject(post);
            Object result1 = jsonObject.get("result");
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }


        String command = "java -jar TRCartget.jar pull " + "\"" + versionNumber + "\"" + " -vp " + "\"" + cmcLocal + "\"" + "-ap" + saveLocal;     //下载命令


        try {
            Process process = Runtime.getRuntime().exec("cmd.exe /c " + command + " >>out.txt");

            try {
                int waitFor = process.waitFor();    //用于阻塞进程  下载完版本后才可进行后续操作
            } catch (InterruptedException e1) {
                // TODO 自动生成的 catch 块
                e1.printStackTrace();
            }
        } catch (IOException e1) {
            // TODO 自动生成的 catch 块
            e1.printStackTrace();
        }
    }
}





























import com.sun.javafx.logging.Logger;
import com.sun.org.apache.bcel.internal.generic.RETURN;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpRetryException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class HttpURLConnectionHelper{
    public static String sendRequest(String urlParam,String requestType){
        HttpURLConnection con=null;
        BufferedReader buffer =null;
        StringBuffer resultBuffer=null;

        try {
            URL url = new URL(urlParam);
            con=(HttpURLConnection)url.openConnection();
            System.out.println(con);
            con.setRequestMethod(requestType);
            con.setDoOutput(true);
            con.setDoInput(true);
            con.setUseCaches(false);
            int responseCode = con.getResponseCode();
            if(responseCode ==HttpURLConnection.HTTP_OK){
                InputStream inputStream = con.getInputStream();
                resultBuffer = new StringBuffer();
                String line ;
                buffer=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));
                while((line= buffer.readLine())!=null){
                    resultBuffer.append(line);
                }
//                System.out.println(resultBuffer.toString());
                return  resultBuffer.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
}
